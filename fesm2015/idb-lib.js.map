{"version":3,"file":"idb-lib.js","sources":["ng://idb-lib/lib/indexed-db.service.ts","ng://idb-lib/lib/indexed-db.component.ts","ng://idb-lib/lib/indexed-db.module.ts","ng://idb-lib/public-api.ts","ng://idb-lib/idb-lib.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDbService {\n  fetchDbData: any = [ ];\n  constructor() { }\n  stream(res): any {\n    return new Promise((resolve, reject) => {\n      if ( window.indexedDB ){\n        let openDb: any;\n        const main = window.indexedDB.open(res.name, 1);\n        main.onerror = (event) => {\n          reject(0);\n        };\n        main.onsuccess = (event: any) => {\n          openDb = event.target.result;\n          openDb.onerror = (dbEvent) => {\n            reject(0);\n          };\n          const getTrans = openDb.transaction(res.store);\n          const getStore = getTrans.objectStore(res.store);\n          const getAllReq = getStore.getAll();\n          getAllReq.onerror = (getAllEvent: any) => {\n            reject(0);\n          };\n          getAllReq.onsuccess = (getAllEvent: any) => {\n            resolve(getAllReq.result);\n          };\n        };\n        main.onupgradeneeded = (event: any) => {\n          const upgradeDb = event.target.result;\n          const upgradeStore = upgradeDb.createObjectStore(res.store);\n          // upgradeStore.createIndex('key', 'key', { unique: true });\n          upgradeStore.transaction.oncomplete = (transactionEvent: any) => {\n            const fetchObjectStore = upgradeDb.transaction(res.store, 'readwrite')\n            .objectStore(res.store);\n            this.fetchDbData.forEach((el) => {\n              fetchObjectStore.add(el);\n            });\n          };\n        };\n      } else {\n        reject(0);\n      }\n    });\n  }\n\n  updateDB(res){\n    return new Promise((resolve, reject) => {\n      if ( window.indexedDB ){\n        let openDb: any;\n        const main = window.indexedDB.open(res.name, 1);\n        main.onerror = (me: any) => {\n          reject(0);\n        };\n        main.onsuccess = (me: any) => {\n          openDb = main.result;\n          const addreq = openDb.transaction([res.store], 'readwrite')\n          .objectStore(res.store)\n          .put(res.data, res.key);\n          addreq.onerror = (ce: any) => {\n            reject(0);\n          };\n          addreq.onsuccess = (ce: any) => {\n            resolve(1);\n          };\n        };\n      } else {\n        reject(0);\n      }\n    });\n  }\n\n  deleteId(res): any {\n    return new Promise((resolve, reject) => {\n      if ( window.indexedDB ){\n        let openDb: any;\n        const main = window.indexedDB.open(res.name, 1);\n        main.onerror = (me: any) => {\n          reject(0);\n        };\n        main.onsuccess = (me: any) => {\n          openDb = main.result;\n          const deleteReq = openDb.transaction([res.store], 'readwrite')\n          .objectStore(res.store)\n          .delete(res.key);\n          deleteReq.onerror = (ce: any) => {\n            reject(0);\n          };\n          deleteReq.onsuccess = (ce: any) => {\n            resolve(1);\n          };\n        };\n      } else {\n        reject(0);\n      }\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'idb-lib-indexedDb',\n  template: `\n    &nbsp;\n  `,\n  styles: [\n  ]\n})\nexport class IndexedDbComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n}\n","import { NgModule } from '@angular/core';\nimport { IndexedDbComponent } from './indexed-db.component';\n\n\n\n@NgModule({\n  declarations: [IndexedDbComponent],\n  imports: [ ],\n  exports: [IndexedDbComponent]\n})\nexport class IndexedDbModule { }\n","/*\n * Public API Surface of indexed-db\n */\n\nexport * from './lib/indexed-db.service';\nexport * from './lib/indexed-db.component';\nexport * from './lib/indexed-db.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}